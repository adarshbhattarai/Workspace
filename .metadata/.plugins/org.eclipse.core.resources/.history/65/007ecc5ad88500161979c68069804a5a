package programming_Assignment5_Dynamic_Programming;

import java.util.*;

public class PrimitiveCalculator {
    private static List<Integer> optimal_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();
        sequence.add(1);
        sequence.add(2);
        sequence.add(3);
        System.out.println("I values = ");
        for(int i = 0 ; i< sequence.size() ; i++){
        	System.out.print(sequence.get(i));
        	
        }
        int i=sequence.get(0);
        
        while (sequence.size() < n) {
        	int minValue = findMinumum(i,sequence);
		
			sequence.add(minValue+1);
		}
        
        System.out.println();
      /*  while (n >= 1) {
            sequence.add(n);
            if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                n -= 1;
            }
        }*/
     //   Collections.reverse(sequence);
        return sequence;
    }

    private static int findMinumum(int i, List<Integer> sequence) {
		// TODO Auto-generated method stub
    	int prev = sequence.get(i-1);
    	if(i%3 != 0 && i%2 != 0 ) return prev+1;
    	else if(i%3==0 && i%2 !=0) {
    		if(sequence.get(i/3) > prev) return prev;
    		return sequence.get(i/3);
    	}
    	else if(i%2 == 0 && i%3 != 0){
    		if(sequence.get(i/2) > prev) return prev;
    		return sequence.get(i/2)+1;
    	}
    	else
    	{
    		if(prev< sequence.get(i/3) && prev <   sequence.get(i/2)) return prev;
    		else if(sequence.get(i/3) < prev && sequence.get(i/3) < sequence.get(i/2)) return sequence.get(i/3);
    	}
    	
    	
		return sequence.get(i/2);
	}

	public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> sequence = optimal_sequence(n);
        System.out.println(sequence.size() - 1);
        for (Integer x : sequence) {
            System.out.print(x + " ");
        }
    }
}

