package programming_assignment_3_divideConquer;

import java.io.*;
import java.util.*;

public class BinarySearch {

    static int binarySearch(int[] a, int x) {
        int left = 0, right = a.length;
     
        if(right < left) return left -1;
        
        int m =  (left + right)/2 ;
        if(x==a[m]) return m;
        if(m==0) return -1;
        if(x<a[m]){
        	int[] leftarr  = new int[m-1];	
        	for(int i = 0 ; i< leftarr.length ; i++){
            	leftarr[i] = a[i];
            }
        	return binarySearch(leftarr, x);
        } 
        
        int[] rightarr = new int[a.length-m];
        
        for (int i = 0; i < rightarr.length; i++) {
			rightarr[i] = a[i+m];
		}
        
       
         
        else   return binarySearch(rightarr, x);

    }

    static int linearSearch(int[] a, int x) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] == x) return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        FastScanner scanner = new FastScanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int m = scanner.nextInt();
        int[] b = new int[m];
        for (int i = 0; i < m; i++) {
          b[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
           
            System.out.print(binarySearch(a, b[i]) + " ");
        }
    }
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream stream) {
            try {
                br = new BufferedReader(new InputStreamReader(stream));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }
}
